// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createSong = `-- name: CreateSong :one
INSERT INTO songs (group_name, song, release_date, song_text, link)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, group_name, song, release_date, song_text, link
`

type CreateSongParams struct {
	GroupName   string
	Song        string
	ReleaseDate sql.NullString
	SongText    sql.NullString
	Link        sql.NullString
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (Song, error) {
	row := q.db.QueryRowContext(ctx, createSong,
		arg.GroupName,
		arg.Song,
		arg.ReleaseDate,
		arg.SongText,
		arg.Link,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Song,
		&i.ReleaseDate,
		&i.SongText,
		&i.Link,
	)
	return i, err
}

const deleteSong = `-- name: DeleteSong :exec
DELETE FROM songs WHERE id = $1
`

func (q *Queries) DeleteSong(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSong, id)
	return err
}

const getSongByID = `-- name: GetSongByID :one
SELECT id, group_name, song, release_date, song_text, link FROM songs WHERE id = $1
`

func (q *Queries) GetSongByID(ctx context.Context, id int32) (Song, error) {
	row := q.db.QueryRowContext(ctx, getSongByID, id)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Song,
		&i.ReleaseDate,
		&i.SongText,
		&i.Link,
	)
	return i, err
}

const getSongs = `-- name: GetSongs :many
SELECT id, group_name, song, release_date, song_text, link FROM songs
WHERE ($1::text IS NULL OR group_name = $1)
  AND ($2::text IS NULL OR song = $2)
  AND ($3::text IS NULL OR release_date = $3)
ORDER BY id
LIMIT $4
OFFSET $5
`

type GetSongsParams struct {
	Column1 string
	Column2 string
	Column3 string
	Limit   int32
	Offset  int32
}

func (q *Queries) GetSongs(ctx context.Context, arg GetSongsParams) ([]Song, error) {
	rows, err := q.db.QueryContext(ctx, getSongs,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.GroupName,
			&i.Song,
			&i.ReleaseDate,
			&i.SongText,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSong = `-- name: UpdateSong :exec
UPDATE songs SET group_name = $2, song = $3, release_date = $4, song_text = $5, link = $6
WHERE id = $1
`

type UpdateSongParams struct {
	ID          int32
	GroupName   string
	Song        string
	ReleaseDate sql.NullString
	SongText    sql.NullString
	Link        sql.NullString
}

func (q *Queries) UpdateSong(ctx context.Context, arg UpdateSongParams) error {
	_, err := q.db.ExecContext(ctx, updateSong,
		arg.ID,
		arg.GroupName,
		arg.Song,
		arg.ReleaseDate,
		arg.SongText,
		arg.Link,
	)
	return err
}
